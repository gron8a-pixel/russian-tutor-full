const express = require('express');
const path = require('path');
const http = require('http');
const WebSocket = require('ws');
const fs = require('fs'); // ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express
const app = express();

const PUBLIC_DIR = path.join(__dirname, 'public');

// üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ public –∏ index.html?
if (!fs.existsSync(PUBLIC_DIR)) {
  console.error('‚ùå –ü–∞–ø–∫–∞ public –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∫—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (npm run build).');
  process.exit(1);
}

const INDEX_PATH = path.join(PUBLIC_DIR, 'index.html');
if (!fs.existsSync(INDEX_PATH)) {
  console.error('‚ùå –§–∞–π–ª public/index.html –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.');
  process.exit(1);
}

console.log('‚úÖ –ù–∞–π–¥–µ–Ω index.html, —Ä–∞–∑–º–µ—Ä:', fs.statSync(INDEX_PATH).size, '–±–∞–π—Ç');

// –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(PUBLIC_DIR, {
  etag: false,        // –æ—Ç–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Render (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  lastModified: false
}));

// SPA fallback: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ò —ç—Ç–æ –Ω–µ API-–∑–∞–ø—Ä–æ—Å
app.get('*', (req, res) => {
  // –ù–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ —è–≤–Ω—ã–º —Ñ–∞–π–ª–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, /assets/...)
  // –ù–æ express.static —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∏—Ö, —Ç–∞–∫ —á—Ç–æ —Å—é–¥–∞ –ø–æ–ø–∞–¥–∞—é—Ç —Ç–æ–ª—å–∫–æ "–Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ"
  res.sendFile(INDEX_PATH);
});

// HTTP-—Å–µ—Ä–≤–µ—Ä
const server = http.createServer(app);

// WebSocket-—Å–µ—Ä–≤–µ—Ä
const wss = new WebSocket.Server({ noServer: true });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ upgrade –¥–ª—è WebSocket
server.on('upgrade', (request, socket, head) => {
  wss.handleUpgrade(request, socket, head, (ws) => {
    wss.emit('connection', ws, request);
  });
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π
const sessions = {};

wss.on('connection', (ws, req) => {
  console.log('üîå –ù–æ–≤–æ–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');

  ws.on('message', (data) => {
    try {
      const message = JSON.parse(data);
      const { type, sessionId } = message;

      if (!sessionId) {
        return ws.send(JSON.stringify({ type: 'error', message: 'sessionId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }));
      }

      // –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
      if (!sessions[sessionId]) {
        sessions[sessionId] = { teacher: null, students: [] };
      }

      if (type === 'join') {
        const { role } = message;
        ws.sessionId = sessionId;
        ws.role = role;

        if (role === 'teacher') {
          sessions[sessionId].teacher = ws;
        } else if (role === 'student') {
          sessions[sessionId].students.push(ws);
        }

        ws.send(JSON.stringify({ type: 'joined', sessionId, role }));
        console.log(`üë§ ${role} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏ ${sessionId}`);
      }

      else if (type === 'chat') {
        const { text, senderRole } = message;
        const session = sessions[sessionId];
        if (!session) return;

        const recipients = [session.teacher, ...session.students].filter(Boolean);
        const payload = JSON.stringify({
          type: 'chat',
          text,
          senderRole,
          timestamp: new Date().toISOString()
        });

        recipients.forEach(client => {
          if (client.readyState === WebSocket.OPEN) {
            client.send(payload);
          }
        });
      }

      else if (type === 'timer') {
        const { action } = message;
        const session = sessions[sessionId];
        if (!session || ws !== session.teacher) {
          return ws.send(JSON.stringify({ type: 'error', message: '–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∞–π–º–µ—Ä–æ–º' }));
        }

        const recipients = [session.teacher, ...session.students].filter(Boolean);
        const payload = JSON.stringify({ type: 'timer', action });
        recipients.forEach(client => {
          if (client.readyState === WebSocket.OPEN) {
            client.send(payload);
          }
        });
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err.message);
      ws.send(JSON.stringify({ type: 'error', message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è' }));
    }
  });

  ws.on('close', () => {
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª–∏—Ç—å ws –∏–∑ —Å–µ—Å—Å–∏–∏
    if (ws.sessionId && sessions[ws.sessionId]) {
      const session = sessions[ws.sessionId];
      if (session.teacher === ws) {
        session.teacher = null;
      } else {
        session.students = session.students.filter(s => s !== ws);
      }
      console.log(`üîå ${ws.role} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å–µ—Å—Å–∏–∏ ${ws.sessionId}`);
    }
  });

  ws.on('error', (err) => {
    console.error('WebSocket –æ—à–∏–±–∫–∞:', err.message);
  });
});

const PORT = process.env.PORT || 3000;

server.listen(PORT, () => {
  console.log(`‚úÖ HTTP + WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìÅ –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏ –∏–∑: ${PUBLIC_DIR}`);
});